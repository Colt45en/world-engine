#!/bin/bash

# NEXUS Game Logic Build Script
# Supports Linux/macOS/WSL compilation and testing

echo "üéµ‚ú® Building NEXUS Game Logic System... ‚ú®üéµ"

# Check for required tools
check_dependency() {
    if ! command -v $1 &> /dev/null; then
        echo "‚ùå $1 is not installed. Please install it first."
        exit 1
    fi
}

echo "üîç Checking dependencies..."
check_dependency "g++"
check_dependency "cmake"

# Clean previous build
echo "üßπ Cleaning previous build..."
rm -rf build
rm -f demo nexus_resource_demo

# Create build directory
echo "üìÅ Creating build directory..."
mkdir -p build
cd build

# Configure with CMake
echo "‚öôÔ∏è  Configuring with CMake..."
cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON

# Build
echo "üî® Building NEXUS Game Logic..."
cmake --build . --config Release --parallel

if [ $? -ne 0 ]; then
    echo "‚ùå Build failed!"
    exit 1
fi

cd ..

# Build standalone demos (your original approach)
echo "üéÆ Building standalone demos..."

# Original demo
echo "üì¶ Building original resource engine demo..."
g++ -std=c++17 -O2 -Wall -Wextra -pedantic \
    -I./include \
    ./examples/basic_game_demo.cpp \
    -o basic_demo -pthread

if [ $? -eq 0 ]; then
    echo "‚úÖ Original demo built successfully"
else
    echo "‚ö†Ô∏è  Original demo build failed"
fi

# NEXUS enhanced demo
echo "üì¶ Building NEXUS resource engine demo..."
g++ -std=c++17 -O2 -Wall -Wextra -pedantic \
    -I./include \
    ./examples/nexus_resource_demo.cpp \
    -o nexus_resource_demo -pthread

if [ $? -eq 0 ]; then
    echo "‚úÖ NEXUS resource demo built successfully"
else
    echo "‚ö†Ô∏è  NEXUS resource demo build failed"
fi

# NEXUS world simulation demo
echo "üì¶ Building NEXUS world simulation demo..."
g++ -std=c++17 -O2 -Wall -Wextra -pedantic \
    -I./include \
    ./examples/nexus_world_demo.cpp \
    -o nexus_world_demo -pthread

if [ $? -eq 0 ]; then
    echo "‚úÖ NEXUS world demo built successfully"
else
    echo "‚ö†Ô∏è  NEXUS world demo build failed"
fi

# NEXUS Quantum Protocol demo
echo "üì¶ Building NEXUS Quantum Protocol demo..."
g++ -std=c++17 -O2 -Wall -Wextra -pedantic \
    -I./include \
    ./examples/nexus_quantum_demo.cpp \
    -o nexus_quantum_demo -pthread

if [ $? -eq 0 ]; then
    echo "‚úÖ NEXUS Quantum demo built successfully"
else
    echo "‚ö†Ô∏è  NEXUS Quantum demo build failed"
fi

# NEXUS Cognitive Recursive Keeper demo
echo "üì¶ Building NEXUS Cognitive demo..."
g++ -std=c++17 -O2 -Wall -Wextra -pedantic \
    -I./include \
    ./examples/nexus_cognitive_demo.cpp \
    -o nexus_cognitive_demo -pthread

if [ $? -eq 0 ]; then
    echo "‚úÖ NEXUS Cognitive demo built successfully"
else
    echo "‚ö†Ô∏è  NEXUS Cognitive demo build failed"
fi

echo ""
echo "üéØ Build Summary:"
echo "=================="
if [ -f "build/examples/basic_game_demo" ]; then
    echo "‚úÖ CMake Basic Demo: ./build/examples/basic_game_demo"
fi
if [ -f "basic_demo" ]; then
    echo "‚úÖ Standalone Basic Demo: ./basic_demo"
fi
if [ -f "nexus_resource_demo" ]; then
    echo "‚úÖ NEXUS Resource Demo: ./nexus_resource_demo"
fi
if [ -d "build" ] && [ "$(ls -A build)" ]; then
    echo "‚úÖ CMake Build: ./build/"
fi

echo ""
echo "üöÄ Quick Test Commands:"
echo "======================="
echo "# Test original basic game demo:"
echo "./basic_demo"
echo ""
echo "# Test NEXUS resource engine (recommended):"
echo "./nexus_resource_demo"
echo ""
echo "# Test CMake-built version:"
echo "./build/examples/basic_game_demo"
echo ""
echo "# Build Node.js bindings:"
echo "npm install && npm run build"
echo ""
echo "# Test Node.js integration:"
echo "node examples/test_bindings.js"

echo ""
echo "üí° Integration Notes:"
echo "===================="
echo "‚Ä¢ Resource engine mirrors your JavaScript API exactly"
echo "‚Ä¢ Async loading with configurable throttling (4 jobs/frame)"
echo "‚Ä¢ Distance + frustum culling for performance"
echo "‚Ä¢ Multi-level LOD: ultra/high/medium/low/billboard"
echo "‚Ä¢ Audio-reactive resources sync to BPM beats"
echo "‚Ä¢ Art-reactive resources follow petal patterns"
echo "‚Ä¢ Physics-enabled resources respond to forces"
echo "‚Ä¢ 2.5D world with Z-axis elevation support"
echo "‚Ä¢ Full NEXUS Holy Beat System integration"

echo ""
echo "üéµ‚ú® NEXUS Game Logic build complete! ‚ú®üéµ"
