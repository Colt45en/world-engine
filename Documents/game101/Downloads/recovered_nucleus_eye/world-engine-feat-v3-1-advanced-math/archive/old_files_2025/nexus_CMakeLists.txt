cmake_minimum_required(VERSION 3.16)
project(NEXUS VERSION 1.0.0 LANGUAGES CXX)

# C++ Standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Build type
if (NOT CMAKE_BUILD_TYPE)
set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler flags
set(CMAKE_CXX_FLAGS "-Wall -Wextra")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")

# Platform - specific configurations
if (WIN32)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWIN32_LEAN_AND_MEAN")
endif()

if (APPLE)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.15")
endif()

# Find required packages
find_package(Threads REQUIRED)

# Optional packages
find_package(PkgConfig)
if (PkgConfig_FOUND)
    pkg_check_modules(FFTW3 fftw3)
endif()

# Include directories
include_directories(${ CMAKE_CURRENT_SOURCE_DIR } / include)

# Header - only library target(for IDE support)
    add_library(NEXUS INTERFACE)
target_include_directories(NEXUS INTERFACE ${ CMAKE_CURRENT_SOURCE_DIR } / include)
target_link_libraries(NEXUS INTERFACE Threads:: Threads)

# Example executables
add_executable(basic_game_demo examples / basic_game_demo.cpp)
target_link_libraries(basic_game_demo NEXUS)

add_executable(nexus_resource_demo examples / nexus_resource_demo.cpp)
target_link_libraries(nexus_resource_demo NEXUS)

add_executable(nexus_world_demo examples / nexus_world_demo.cpp)
target_link_libraries(nexus_world_demo NEXUS)

add_executable(nexus_quantum_demo examples / nexus_quantum_demo.cpp)
target_link_libraries(nexus_quantum_demo NEXUS)

add_executable(nexus_cognitive_demo examples / nexus_cognitive_demo.cpp)
target_link_libraries(nexus_cognitive_demo NEXUS)

# Complete comprehensive demo
add_executable(nexus_complete_demo examples / nexus_complete_demo.cpp)
target_link_libraries(nexus_complete_demo NEXUS)

# Test runner
add_executable(nexus_test_runner
    examples / nexus_test_runner.cpp
)
target_link_libraries(nexus_test_runner NEXUS)

# Custom targets for running demos
add_custom_target(run_demo
    COMMAND $ < TARGET_FILE: nexus_complete_demo >
DEPENDS nexus_complete_demo
    COMMENT "Running NEXUS comprehensive demo")

add_custom_target(run_tests
    COMMAND $ < TARGET_FILE: nexus_test_runner >
DEPENDS nexus_test_runner
    COMMENT "Running NEXUS test suite")

# Node.js addon support(if available)
    find_program(NODE_EXECUTABLE node)
if (NODE_EXECUTABLE)
    message(STATUS "Node.js found: ${NODE_EXECUTABLE}")
add_custom_target(nexus_addon
        COMMAND ${ NODE_EXECUTABLE } ${ CMAKE_CURRENT_SOURCE_DIR } / bindings / build_addon.js
        WORKING_DIRECTORY ${ CMAKE_CURRENT_SOURCE_DIR }
        COMMENT "Building Node.js addon")
endif()

# Install rules
install(DIRECTORY include / DESTINATION include / NEXUS)
install(FILES README.md LICENSE DESTINATION share / doc / NEXUS)

# Testing configuration
enable_testing()
add_test(NAME nexus_test_suite COMMAND nexus_test_runner)

# Documentation
find_program(DOXYGEN_EXECUTABLE doxygen)
if (DOXYGEN_EXECUTABLE)
    configure_file(${ CMAKE_CURRENT_SOURCE_DIR } / docs / Doxyfile.in
                   ${ CMAKE_CURRENT_BINARY_DIR } / Doxyfile @ONLY)
add_custom_target(docs
        COMMAND ${ DOXYGEN_EXECUTABLE } ${ CMAKE_CURRENT_BINARY_DIR } / Doxyfile
        WORKING_DIRECTORY ${ CMAKE_CURRENT_BINARY_DIR }
        COMMENT "Generating API documentation")
endif()

# Configuration summary
message(STATUS "========================================")
message(STATUS "NEXUS Game Engine Configuration")
message(STATUS "========================================")
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "C++ compiler: ${CMAKE_CXX_COMPILER}")
message(STATUS "C++ standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")

if (FFTW3_FOUND)
    message(STATUS "FFTW3 support: ENABLED")
else ()
message(STATUS "FFTW3 support: DISABLED (optional)")
endif()

if (NODE_EXECUTABLE)
    message(STATUS "Node.js support: ENABLED")
else ()
message(STATUS "Node.js support: DISABLED")
endif()

if (DOXYGEN_EXECUTABLE)
    message(STATUS "Documentation: ENABLED")
else ()
message(STATUS "Documentation: DISABLED (doxygen not found)")
endif()

message(STATUS "========================================")
message(STATUS "Available targets:")
message(STATUS "  make                  - Build all executables")
message(STATUS "  make nexus_complete_demo - Build comprehensive demo")
message(STATUS "  make nexus_test_runner - Build test suite")
message(STATUS "  make run_demo        - Run comprehensive demo")
message(STATUS "  make run_tests       - Run test suite")
if (NODE_EXECUTABLE)
    message(STATUS "  make nexus_addon     - Build Node.js addon")
endif()
if (DOXYGEN_EXECUTABLE)
    message(STATUS "  make docs            - Generate documentation")
endif()
message(STATUS "  make test            - Run CTest")
message(STATUS "  make install         - Install headers and docs")
message(STATUS "========================================")

# Package configuration
set(CPACK_PACKAGE_NAME "NEXUS")
set(CPACK_PACKAGE_VERSION ${ PROJECT_VERSION })
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "NEXUS Quantum-Enhanced Game Engine")
set(CPACK_PACKAGE_VENDOR "NEXUS Technologies")
set(CPACK_RESOURCE_FILE_LICENSE ${ CMAKE_CURRENT_SOURCE_DIR } / LICENSE)
set(CPACK_RESOURCE_FILE_README ${ CMAKE_CURRENT_SOURCE_DIR } / README.md)

if (WIN32)
    set(CPACK_GENERATOR "NSIS")
elseif(APPLE)
set(CPACK_GENERATOR "DragNDrop")
else ()
set(CPACK_GENERATOR "DEB;RPM;TGZ")
endif()

include(CPack)
