@echo off
REM NEXUS Game Logic Build Script for Windows
REM Supports MSVC compilation and testing

echo üéµ‚ú® Building NEXUS Game Logic System (Windows)... ‚ú®üéµ
echo.

REM Check for Visual Studio tools
where cl >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo ‚ùå Visual Studio compiler not found. Please run from Visual Studio Developer Command Prompt.
    echo üí° Or install Visual Studio with C++ development tools.
    pause
    exit /b 1
)

where cmake >nul 2>nul
if %ERRORLEVEL% NEQ 0 (
    echo ‚ùå CMake not found. Please install CMake and add to PATH.
    pause
    exit /b 1
)

echo ‚úÖ Found Visual Studio compiler and CMake

REM Clean previous build
echo üßπ Cleaning previous build...
if exist build rmdir /s /q build
if exist nexus_resource_demo.exe del nexus_resource_demo.exe
if exist basic_demo.exe del basic_demo.exe

REM Create build directory
echo üìÅ Creating build directory...
mkdir build
cd build

REM Configure with CMake
echo ‚öôÔ∏è Configuring with CMake...
cmake .. -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=ON

if %ERRORLEVEL% NEQ 0 (
    echo ‚ùå CMake configuration failed!
    pause
    exit /b 1
)

REM Build
echo üî® Building NEXUS Game Logic...
cmake --build . --config Release

if %ERRORLEVEL% NEQ 0 (
    echo ‚ùå Build failed!
    pause
    exit /b 1
)

cd ..

REM Build standalone demos
echo üéÆ Building standalone demos...

echo üì¶ Building basic game demo...
cl /EHsc /std:c++17 /O2 /I./include examples\basic_game_demo.cpp /Fe:basic_demo.exe
if %ERRORLEVEL% EQU 0 (
    echo ‚úÖ Basic demo built successfully
) else (
    echo ‚ö†Ô∏è Basic demo build failed
)

echo üì¶ Building NEXUS resource demo...
cl /EHsc /std:c++17 /O2 /I./include examples\nexus_resource_demo.cpp /Fe:nexus_resource_demo.exe
if %ERRORLEVEL% EQU 0 (
    echo ‚úÖ NEXUS resource demo built successfully
) else (
    echo ‚ö†Ô∏è NEXUS resource demo build failed
)

echo üì¶ Building NEXUS world demo...
cl /EHsc /std:c++17 /O2 /I./include examples\nexus_world_demo.cpp /Fe:nexus_world_demo.exe
if %ERRORLEVEL% EQU 0 (
    echo ‚úÖ NEXUS world demo built successfully
) else (
    echo ‚ö†Ô∏è NEXUS world demo build failed
)

echo üì¶ Building NEXUS Quantum demo...
cl /EHsc /std:c++17 /O2 /I./include examples\nexus_quantum_demo.cpp /Fe:nexus_quantum_demo.exe
if %ERRORLEVEL% EQU 0 (
    echo ‚úÖ NEXUS Quantum demo built successfully
) else (
    echo ‚ö†Ô∏è NEXUS Quantum demo build failed
)

echo üì¶ Building NEXUS Cognitive demo...
cl /EHsc /std:c++17 /O2 /I./include examples\nexus_cognitive_demo.cpp /Fe:nexus_cognitive_demo.exe
if %ERRORLEVEL% EQU 0 (
    echo ‚úÖ NEXUS Cognitive demo built successfully
) else (
    echo ‚ö†Ô∏è NEXUS Cognitive demo build failed
)

REM Clean up compiler temp files
if exist *.obj del *.obj
if exist *.pdb del *.pdb

echo.
echo üéØ Build Summary:
echo ==================
if exist "build\examples\Release\basic_game_demo.exe" (
    echo ‚úÖ CMake Basic Demo: build\examples\Release\basic_game_demo.exe
)
if exist "basic_demo.exe" (
    echo ‚úÖ Standalone Basic Demo: basic_demo.exe
)
if exist "nexus_resource_demo.exe" (
    echo ‚úÖ NEXUS Resource Demo: nexus_resource_demo.exe
)

echo.
echo üöÄ Quick Test Commands:
echo =======================
echo # Test basic game demo:
echo basic_demo.exe
echo.
echo # Test NEXUS resource engine ^(recommended^):
echo nexus_resource_demo.exe
echo.
echo # Test CMake-built version:
echo build\examples\Release\basic_game_demo.exe
echo.
echo # Build Node.js bindings:
echo npm install ^&^& npm run build
echo.
echo # Test Node.js integration:
echo node examples\test_bindings.js

echo.
echo üí° Integration Features:
echo ========================
echo ‚Ä¢ Resource engine mirrors your JavaScript API exactly
echo ‚Ä¢ Async loading with configurable throttling ^(4 jobs/frame^)
echo ‚Ä¢ Distance + frustum culling for performance
echo ‚Ä¢ Multi-level LOD: ultra/high/medium/low/billboard
echo ‚Ä¢ Audio-reactive resources sync to BPM beats
echo ‚Ä¢ Art-reactive resources follow petal patterns
echo ‚Ä¢ Physics-enabled resources respond to forces
echo ‚Ä¢ 2.5D world with Z-axis elevation support
echo ‚Ä¢ Full NEXUS Holy Beat System integration

echo.
echo üéµ‚ú® NEXUS Game Logic build complete! ‚ú®üéµ
pause
