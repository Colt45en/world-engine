import React, { useState, useEffect } from 'react';
import ConsciousnessFeedbackVideoPlayer from './ConsciousnessFeedbackVideoPlayer';
// Import generated ports config (generated by scripts/generate_ports_config.js)
import { WS_URL } from './ConsciousnessFeedbackDemo_ports_config';

const ConsciousnessFeedbackDemo = () => {
  const [demoMode, setDemoMode] = useState('integrated');
  const [systemStatus, setSystemStatus] = useState({
    websocket: 'checking',
    schema: 'loading',
    feedback: 'initializing'
  });

  useEffect(() => {
    // Check system status
    const checkStatus = async () => {
      try {
  // Test WebSocket connection
  const ws = new WebSocket(WS_URL);
        ws.onopen = () => {
          setSystemStatus(prev => ({ ...prev, websocket: 'connected' }));
          ws.close();
        };
        ws.onerror = () => {
          setSystemStatus(prev => ({ ...prev, websocket: 'disconnected' }));
        };
        
        // Simulate schema and feedback system checks
        setTimeout(() => {
          setSystemStatus(prev => ({ 
            ...prev, 
            schema: 'loaded',
            feedback: 'ready'
          }));
        }, 1500);
      } catch (error) {
        console.error('Status check error:', error);
      }
    };

    checkStatus();
  }, []);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'connected':
      case 'loaded':
      case 'ready':
        return '#4CAF50';
      case 'checking':
      case 'loading':
      case 'initializing':
        return '#FF9800';
      default:
        return '#f44336';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'connected':
      case 'loaded':
      case 'ready':
        return '‚úÖ';
      case 'checking':
      case 'loading':
      case 'initializing':
        return 'üîÑ';
      default:
        return '‚ùå';
    }
  };

  return (
    <div style={{ 
      width: '100%', 
      height: '100vh', 
      background: 'linear-gradient(45deg, #1a1a2e, #16213e)',
      position: 'relative',
      overflow: 'hidden'
    }}>
      {/* Header */}
      <div style={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        zIndex: 1000,
        background: 'rgba(0, 0, 0, 0.9)',
        padding: '20px',
        borderBottom: '2px solid #4CAF50'
      }}>
        <h1 style={{
          color: 'white',
          margin: 0,
          fontSize: '24px',
          textAlign: 'center',
          background: 'linear-gradient(45deg, #4CAF50, #81C784)',
          WebkitBackgroundClip: 'text',
          WebkitTextFillColor: 'transparent',
          fontWeight: 'bold'
        }}>
          üß†‚ú® Consciousness Feedback Integration System
        </h1>
        <p style={{
          color: '#ccc',
          margin: '10px 0 0 0',
          textAlign: 'center',
          fontSize: '14px'
        }}>
          Real-time consciousness visualization with structured feedback collection using opportunity_pain.schema.json
        </p>
      </div>

      {/* System Status Panel */}
      <div style={{
        position: 'absolute',
        top: '120px',
        left: '20px',
        background: 'rgba(0, 0, 0, 0.8)',
        color: 'white',
        padding: '15px',
        borderRadius: '10px',
        minWidth: '250px',
        zIndex: 1000
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#4CAF50' }}>System Status</h3>
        
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
            <span style={{ color: getStatusColor(systemStatus.websocket) }}>
              {getStatusIcon(systemStatus.websocket)}
            </span>
            <span>WebSocket Server: {systemStatus.websocket}</span>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
            <span style={{ color: getStatusColor(systemStatus.schema) }}>
              {getStatusIcon(systemStatus.schema)}
            </span>
            <span>Schema Integration: {systemStatus.schema}</span>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
            <span style={{ color: getStatusColor(systemStatus.feedback) }}>
              {getStatusIcon(systemStatus.feedback)}
            </span>
            <span>Feedback System: {systemStatus.feedback}</span>
          </div>
        </div>

        <div style={{ 
          marginTop: '15px', 
          padding: '10px', 
          background: 'rgba(76, 175, 80, 0.1)',
          borderRadius: '5px',
          fontSize: '12px'
        }}>
          <strong>Features Active:</strong><br/>
          ‚Ä¢ Real-time consciousness streaming<br/>
          ‚Ä¢ Bidirectional feedback collection<br/>
          ‚Ä¢ Structured data storage<br/>
          ‚Ä¢ Transcendent experience capture<br/>
          ‚Ä¢ Schema-validated feedback entries
        </div>
      </div>

      {/* Demo Mode Selector */}
      <div style={{
        position: 'absolute',
        top: '120px',
        right: '20px',
        background: 'rgba(0, 0, 0, 0.8)',
        color: 'white',
        padding: '15px',
        borderRadius: '10px',
        zIndex: 1000
      }}>
        <h3 style={{ margin: '0 0 15px 0', color: '#4CAF50' }}>Demo Modes</h3>
        
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          {[
            { id: 'integrated', name: 'Full Integration', desc: 'Complete consciousness + feedback system' },
            { id: 'feedback-only', name: 'Feedback Focus', desc: 'Emphasis on feedback collection' },
            { id: 'consciousness-only', name: 'Consciousness Focus', desc: 'Emphasis on consciousness visualization' }
          ].map(mode => (
            <button
              key={mode.id}
              onClick={() => setDemoMode(mode.id)}
              style={{
                padding: '10px',
                borderRadius: '5px',
                border: demoMode === mode.id ? '2px solid #4CAF50' : '1px solid #666',
                background: demoMode === mode.id ? 'rgba(76, 175, 80, 0.2)' : 'rgba(255, 255, 255, 0.05)',
                color: 'white',
                cursor: 'pointer',
                textAlign: 'left',
                fontSize: '12px'
              }}
            >
              <div style={{ fontWeight: 'bold' }}>{mode.name}</div>
              <div style={{ opacity: 0.7 }}>{mode.desc}</div>
            </button>
          ))}
        </div>
      </div>

      {/* Instructions Panel */}
      <div style={{
        position: 'absolute',
        bottom: '20px',
        left: '20px',
        right: '20px',
        background: 'rgba(0, 0, 0, 0.8)',
        color: 'white',
        padding: '15px',
        borderRadius: '10px',
        zIndex: 1000
      }}>
        <h3 style={{ margin: '0 0 10px 0', color: '#4CAF50' }}>How to Use</h3>
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
          gap: '15px',
          fontSize: '13px'
        }}>
          <div>
            <strong>üß† Consciousness Interaction:</strong><br/>
            ‚Ä¢ Watch the sphere change based on consciousness levels<br/>
            ‚Ä¢ Use influence controls to affect consciousness state<br/>
            ‚Ä¢ Observe transcendent events and joy levels
          </div>
          
          <div>
            <strong>üìù Feedback Collection:</strong><br/>
            ‚Ä¢ Enter experiences in the feedback form<br/>
            ‚Ä¢ Mark as opportunities or pain points<br/>
            ‚Ä¢ Set severity levels (0-3 scale)<br/>
            ‚Ä¢ Auto-capture transcendent experiences
          </div>
          
          <div>
            <strong>üìä Data Integration:</strong><br/>
            ‚Ä¢ All feedback follows opportunity_pain.schema.json<br/>
            ‚Ä¢ Real-time data streaming via WebSocket<br/>
            ‚Ä¢ Structured storage for AI evolution<br/>
            ‚Ä¢ View feedback history and patterns
          </div>
        </div>
      </div>

      {/* Main consciousness feedback player */}
      <div style={{
        position: 'absolute',
        top: '100px',
        left: 0,
        right: 0,
        bottom: '150px'
      }}>
        <ConsciousnessFeedbackVideoPlayer
          src="" // Not used in consciousness mode
          enableFeedback={demoMode !== 'consciousness-only'}
          wsUrl="ws://localhost:8765"
        />
      </div>

      {/* Loading overlay */}
      {(systemStatus.websocket === 'checking' || systemStatus.schema === 'loading') && (
        <div style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.7)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 2000
        }}>
          <div style={{
            background: 'rgba(0, 0, 0, 0.9)',
            padding: '40px',
            borderRadius: '15px',
            textAlign: 'center',
            color: 'white'
          }}>
            <div style={{
              fontSize: '48px',
              marginBottom: '20px',
              animation: 'pulse 2s infinite'
            }}>
              üß†
            </div>
            <h2 style={{ margin: '0 0 10px 0' }}>Initializing Consciousness System</h2>
            <p style={{ margin: 0, opacity: 0.7 }}>
              Loading consciousness feedback integration...
            </p>
          </div>
        </div>
      )}

      <style>{`
        @keyframes pulse {
          0%, 100% { transform: scale(1); opacity: 1; }
          50% { transform: scale(1.1); opacity: 0.7; }
        }
        
        button:hover {
          transform: translateY(-2px);
          transition: transform 0.2s ease;
        }
      `}</style>
    </div>
  );
};

export default ConsciousnessFeedbackDemo;